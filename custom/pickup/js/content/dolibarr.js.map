{"version":3,"file":"dolibarr.js","mappings":"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","sources":["webpack://dolibarrpickup/./src/shared/printlabel.ts","webpack://dolibarrpickup/./src/dolibarr/utils.ts","webpack://dolibarrpickup/./src/dolibarr/batch.ts","webpack://dolibarrpickup/./src/dolibarr/expedition.ts","webpack://dolibarrpickup/./src/dolibarr.ts","webpack://dolibarrpickup/./src/dolibarr/stock.ts"],"sourcesContent":["let printLabelUrl: string = '/custom/pickup/pickup_printable_label.php'\n\nfunction setPrintLabelUrl (url: string): void {\n  printLabelUrl = url\n}\n\nfunction _print (dom: JQuery | HTMLElement, url: string): void {\n  const domElement: HTMLElement | undefined = ('get' in dom) ? dom.get(0) : dom\n  if (!domElement) { return }\n\n  const iframe: HTMLIFrameElement = document.createElement('iframe')\n  iframe.setAttribute('src', url)\n  iframe.style.display = 'none'\n\n  let waitingElement: HTMLElement | undefined\n  let removeDisabledClass = false\n  if (domElement.classList.contains('btn')) {\n    // It seems we are using a Boostrap button (mobile app), so we can use Bootstrap spinner element\n    waitingElement = document.createElement('span')\n    waitingElement.classList.add('spinner-border')\n    waitingElement.classList.add('spinner-border-sm')\n    dom.prepend(waitingElement)\n  } else if (domElement.classList.contains('button')) {\n    // We must be on the classic Dolibarr interface.\n    removeDisabledClass = true\n    domElement.classList.add('disabled')\n  }\n\n  domElement.after(iframe)\n\n  iframe.onload = () => {\n    iframe.contentWindow?.print()\n    waitingElement?.remove()\n    if (removeDisabledClass) {\n      domElement.classList.remove('disabled')\n    }\n  }\n}\n\nfunction printProductLabel (dom: JQuery | HTMLElement, id: string): void {\n  const url = new URL(printLabelUrl, window.location.origin)\n  url.searchParams.set('what', 'product')\n  url.searchParams.set('product_id[]', id)\n\n  _print(dom, url.toString())\n}\n\nfunction printPickupLabels (dom: JQuery | HTMLElement, id: string): void {\n  const url = new URL(printLabelUrl, window.location.origin)\n  url.searchParams.set('what', 'pickup')\n  url.searchParams.set('pickup_id[]', id)\n\n  _print(dom, url.toString())\n}\n\nfunction printPickupLineLabels (dom: JQuery | HTMLElement, id: string): void {\n  const url = new URL(printLabelUrl, window.location.origin)\n  url.searchParams.set('what', 'pickupline')\n  url.searchParams.set('pickupline_id[]', id)\n\n  _print(dom, url.toString())\n}\n\nfunction printProductLotLabel (dom: JQuery | HTMLElement, id: string | string[]): void {\n  const url = new URL(printLabelUrl, window.location.origin)\n  url.searchParams.set('what', 'product_lot')\n  if (Array.isArray(id)) {\n    url.searchParams.delete('productlot_id[]')\n    id.forEach(i => url.searchParams.append('productlot_id[]', i))\n  } else {\n    url.searchParams.set('productlot_id[]', id)\n  }\n\n  _print(dom, url.toString())\n}\n\nfunction printLabelIconSVG (): string {\n  return `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"16\" fill=\"currentColor\" viewBox=\"0 0 32 16\">\n  <g id=\"bars\" fill=\"currentColor\" stroke=\"none\">\n    <rect x=\"0\" y=\"0\" width=\"4\" height=\"30\"></rect>\n    <rect x=\"6\" y=\"0\" width=\"2\" height=\"30\"></rect>\n    <rect x=\"12\" y=\"0\" width=\"2\" height=\"30\"></rect>\n    <rect x=\"22\" y=\"0\" width=\"4\" height=\"30\"></rect>\n    <rect x=\"28\" y=\"0\" width=\"6\" height=\"30\"></rect>\n  </g>\n</svg>`\n  // return `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-qr-code\" viewBox=\"0 0 16 16\">\n  //   <path d=\"M2 2h2v2H2V2Z\"/>\n  //   <path d=\"M6 0v6H0V0h6ZM5 1H1v4h4V1ZM4 12H2v2h2v-2Z\"/>\n  //   <path d=\"M6 10v6H0v-6h6Zm-5 1v4h4v-4H1Zm11-9h2v2h-2V2Z\"/>\n  //   <path d=\"M10 0v6h6V0h-6Zm5 1v4h-4V1h4ZM8 1V0h1v2H8v2H7V1h1Zm0 5V4h1v2H8ZM6 8V7h1V6h1v2h1V7h5v1h-4v1H7V8H6Zm0 0v1H2V8H1v1H0V7h3v1h3Zm10 1h-1V7h1v2Zm-1 0h-1v2h2v-1h-1V9Zm-4 0h2v1h-1v1h-1V9Zm2 3v-1h-1v1h-1v1H9v1h3v-2h1Zm0 0h3v1h-2v1h-1v-2Zm-4-1v1h1v-2H7v1h2Z\"/>\n  //   <path d=\"M7 12h1v3h4v1H7v-4Zm9 2v2h-3v-1h2v-1h1Z\"/>\n  // </svg>`\n}\n\nexport {\n  setPrintLabelUrl,\n  printProductLabel,\n  printPickupLabels,\n  printPickupLineLabels,\n  printProductLotLabel,\n  printLabelIconSVG\n}\n","import { setPrintLabelUrl } from '../shared/printlabel'\n\nlet baseUrl: string | undefined\nfunction setBaseUrl (url: string): void {\n  baseUrl = url\n  console.log('Base url is set to:', url)\n  setPrintLabelUrl(getUrl('pickup_printable_label.php'))\n}\n\nfunction getUrl (path: string, parameters?: {[key: string]: string}): string {\n  if (!baseUrl) {\n    throw new Error('DolibarrPickup base url is not set')\n  }\n  const uri = new URL(path, document.location.origin + baseUrl)\n  if (parameters === null) {\n    return uri.toString()\n  }\n  for (const k in parameters) {\n    const v = parameters[k]\n    uri.searchParams.set(k, v)\n  }\n  return uri.toString()\n}\n\nexport {\n  setBaseUrl,\n  getUrl\n}\n","import { getUrl } from './utils'\n\nasync function generateBatchNumber (productId: string): Promise<string | null> {\n  const url = getUrl('mobile_data.php', {\n    action: 'generate',\n    key: 'batchnumber',\n    product_id: productId\n  })\n  const response = await fetch(url, {\n    method: 'GET',\n    cache: 'no-cache'\n  })\n  const contentType = response.headers.get('content-type')\n  if (!contentType || !contentType.includes('application/json')) { return null }\n  const json = await response.json()\n  return json.batch_number\n}\n\nfunction createGenerateBatchNumberButton (input: HTMLInputElement, productId: string): void {\n  const b = document.createElement('a')\n  b.classList.add('button')\n  b.classList.add('buttongen')\n  b.innerHTML = '&larr;Générer'\n  b.title = 'Générer un numéro de lot/série'\n  b.onclick = async () => {\n    input.value = await generateBatchNumber(productId) ?? ''\n  }\n  input.after(b)\n}\n\nexport {\n  createGenerateBatchNumberButton\n}\n","const batchNumber2BatchId = new Map<string, number[]>()\nconst batchId2BatchNumber = new Map<number, string>()\nconst batchNumber2BatchStatus = new Map<string, '1' | '2'>()\n\nconst resetedLines = new Map<number, true>()\nconst alreadyDoneBatchNumber = new Map<string, true>()\n\n/**\n * If label scan functionnality is enabled,\n * add the possibility to scan labels on the expedition/create form.\n */\nfunction addScanLabelsToExpeditionForm (guessSelector: string): void {\n  batchNumber2BatchId.clear()\n  batchId2BatchNumber.clear()\n  batchNumber2BatchStatus.clear()\n  resetedLines.clear()\n  alreadyDoneBatchNumber.clear()\n\n  $(function () {\n    const table = findTable(guessSelector)\n    if (!table || !table.length) {\n      return\n    }\n    const form = createForm()\n    const textarea = form.find('textarea')\n    textarea.on('keyup', function (e) {\n      if (e.key !== 'Enter') {\n        return\n      }\n      refresh(table, $(this))\n    })\n    table.before(form)\n  })\n}\n\ninterface FillBatchInfosParam {\n  [key: string]: {\n    productBatchId: number[]\n    statusBatch: '1' | '2'\n  }\n}\n\nfunction fillBatchInfos (data: FillBatchInfosParam): void {\n  for (const batchNumber in data) {\n    batchNumber2BatchId.set(batchNumber, data[batchNumber].productBatchId)\n    for (const pbi of data[batchNumber].productBatchId) {\n      batchId2BatchNumber.set(pbi, batchNumber)\n    }\n    batchNumber2BatchStatus.set(batchNumber, data[batchNumber].statusBatch)\n  }\n}\n\nfunction findTable (guessSelector: string): JQuery | null {\n  if (!guessSelector) {\n    return null\n  }\n  return $(guessSelector).closest('table')\n}\n\nfunction createForm (): JQuery {\n  const el = $(`\n    <label>\n      Scannez les étiquettes pour sélectionner les lots.\n      <textarea></textarea>\n    </label>\n  `)\n  return el\n}\n\nfunction refresh (table: JQuery, textarea: JQuery): void {\n  const val: string = (textarea.val() ?? '').toString()\n  const values = val.split(/\\n|\\r/).map(s => s.trim()).filter(s => s !== '')\n  for (const batch of values) {\n    if (alreadyDoneBatchNumber.has(batch)) { continue }\n    alreadyDoneBatchNumber.set(batch, true)\n\n    const batchIds = batchNumber2BatchId.get(batch)\n    if (!batchIds) { continue }\n\n    const line = getLineForProductBatchId(table, batchIds)\n    console.log('Scan pour ' + batch, line)\n    if (!line) { continue }\n\n    // Si c'est la première fois que je scanne quelque chose pour cette ligne,\n    // je commence par tout mettre à 0.\n    if (!resetedLines.has(line.indiceAsked)) {\n      table.find(\n        'input[name=qtyl' + line.indiceAsked.toString() + '], ' + // qtyl4\n        'input[name^=qtyl' + line.indiceAsked.toString() + '_]' // qtyl4_5\n      ).val(0)\n      resetedLines.set(line.indiceAsked, true)\n    }\n\n    // Maintenant je modifie la quantité sur la ligne qui va bien.\n    // La quantité qu'il faudra mettre:\n    // * statusBatch === '1' => qtyasked - qtydelivered\n    // * statusBatch === '2' => 1.\n    // * Autre: dans le doute, on prend la même formule que pour '1'\n    // Si jamais on arrive à une valeur < 1, on met 1 quand même.\n    const statusBatch = batchNumber2BatchStatus.get(batch)\n    const qty = statusBatch === '2' ? 1 : Math.max(1, line.qtyAsked - line.qtyDelivered)\n    line.qtyInput.val(qty)\n  }\n}\n\ninterface Line {\n  indiceAsked: number\n  qtyAsked: number\n  qtyDelivered: number\n  qty: Number\n  tr: JQuery\n  qtyInput: JQuery\n}\n\nfunction getLineForProductBatchId (table: JQuery, batchIds: number[]): Line | null {\n  // Note: j'ai plusieurs batchIds. Normalement je ne devrais en avoir qu'un pour l'entrepot courant.\n  let tr: JQuery | undefined\n  for (const batchId of batchIds) {\n    // Note: si jamais le produit apparait plusieurs fois, je ne traite que la première apparation (d'où le .first())\n    tr = table.find('input[name^=batchl][value=' + (batchId.toString()) + ']').first().closest('tr')\n    if (tr.length !== 0) {\n      break\n    }\n  }\n  if (!tr?.length) {\n    return null\n  }\n\n  const qtyInput = tr.find('input[name^=qtyl]').first()\n  const qty = parseInt(qtyInput.val() as string ?? 0)\n\n  // On remonte à la ligne produit associée:\n  if (!qtyInput.length) {\n    return null\n  }\n\n  const fname = qtyInput.attr('name')\n  const matches = fname?.match(/^qtyl(\\d+)(_\\d+)?$/)\n  if (!matches) {\n    return null\n  }\n\n  const indiceAsked = parseInt(matches[1])\n  const qtyAsked = parseInt(table.find('#qtyasked' + indiceAsked.toString()).val() as string || '0')\n  const qtyDelivered = parseInt(table.find('#qtydelivered' + indiceAsked.toString()).val() as string || '0')\n\n  return {\n    indiceAsked,\n    qtyAsked,\n    qtyDelivered,\n    qty,\n    tr,\n    qtyInput\n  }\n}\n\nexport {\n  addScanLabelsToExpeditionForm,\n  fillBatchInfos\n}\n","import { printPickupLabels, printPickupLineLabels, printProductLabel, printProductLotLabel } from './shared/printlabel'\nimport { enhanceStockTransferForm } from './dolibarr/stock'\nimport { setBaseUrl } from './dolibarr/utils'\nimport { addScanLabelsToExpeditionForm, fillBatchInfos } from './dolibarr/expedition'\n\ndeclare global {\n  interface Window {\n    dolibarrPickup: {\n      setBaseUrl: typeof setBaseUrl\n      printProductLabel: typeof printProductLabel\n      printPickupLabels: typeof printPickupLabels\n      printPickupLineLabels: typeof printPickupLineLabels\n      printProductLotLabel: typeof printProductLotLabel\n      enhanceStockTransferForm: typeof enhanceStockTransferForm\n      addScanLabelsToExpeditionForm: typeof addScanLabelsToExpeditionForm\n      fillBatchInfos: typeof fillBatchInfos\n    }\n  }\n}\n\nwindow.dolibarrPickup = {\n  setBaseUrl,\n  printProductLabel,\n  printPickupLabels,\n  printPickupLineLabels,\n  printProductLotLabel,\n  enhanceStockTransferForm,\n  addScanLabelsToExpeditionForm,\n  fillBatchInfos\n}\n","import { createGenerateBatchNumberButton } from './batch'\n\nfunction enhanceStockTransferForm (_apiUrl: string, productId: string, batchIsUnique: boolean): void {\n  console.log('Entering enhanceStockTransferForm...')\n  document.querySelectorAll('input[name=batch_number]:not(disabled)').forEach((el) => {\n    console.log('enhanceStockTransferForm: found a batch_number input')\n    const input: HTMLInputElement = el as HTMLInputElement\n    if (input.value) {\n      console.log('enhanceStockTransferForm: input is not empty, skipping')\n      return\n    }\n    createGenerateBatchNumberButton(input, productId)\n  })\n\n  if (batchIsUnique) {\n    console.log('enhanceStockTransferForm: batch must be unique, settings nbpiece to 1 by default')\n    document.querySelectorAll('input[name=nbpiece]:not(disabled)').forEach((el) => {\n      if (!('value' in (el as any))) { return }\n      if (!(el as HTMLInputElement).value) {\n        (el as HTMLInputElement).value = '1'\n      }\n    })\n  }\n}\n\nexport {\n  enhanceStockTransferForm\n}\n"],"names":["baseUrl","printLabelUrl","_print","dom","url","domElement","get","waitingElement","iframe","document","createElement","setAttribute","style","display","removeDisabledClass","classList","contains","add","prepend","after","onload","contentWindow","print","remove","getUrl","path","parameters","Error","uri","URL","location","origin","toString","k","v","searchParams","set","generateBatchNumber","productId","action","key","product_id","fetch","method","cache","response","contentType","headers","includes","json","batch_number","batchNumber2BatchId","Map","batchId2BatchNumber","batchNumber2BatchStatus","resetedLines","alreadyDoneBatchNumber","getLineForProductBatchId","table","batchIds","tr","batchId","find","first","closest","length","qtyInput","qty","parseInt","val","fname","attr","matches","match","indiceAsked","qtyAsked","qtyDelivered","window","dolibarrPickup","setBaseUrl","console","log","setPrintLabelUrl","printProductLabel","id","printPickupLabels","printPickupLineLabels","printProductLotLabel","Array","isArray","delete","forEach","i","append","enhanceStockTransferForm","_apiUrl","batchIsUnique","querySelectorAll","el","input","value","b","innerHTML","title","onclick","createGenerateBatchNumberButton","addScanLabelsToExpeditionForm","guessSelector","clear","$","findTable","form","on","e","textarea","split","map","s","trim","filter","batch","has","line","Math","max","refresh","this","before","fillBatchInfos","data","batchNumber","productBatchId","pbi","statusBatch"],"sourceRoot":""}