<?php
/* 
 * Copyright (C) 2025 Massaoud Bouzenad    <massaoud@dzprod.net>
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
require_once DOL_DOCUMENT_ROOT . '/core/lib/files.lib.php';
require_once DOL_DOCUMENT_ROOT . '/core/lib/date.lib.php';
require_once DOL_DOCUMENT_ROOT . '/core/lib/functions.lib.php';

class DoliDiag
{
    protected $db;
    protected $output_dir;
    protected $redact_sensitive = false;

    public $error;
    public $errors = array();

    public function __construct($db)
    {
        global $conf;
        $this->db = $db;
        $this->output_dir = DOL_DATA_ROOT . '/dolidiag/';
        if (!file_exists($this->output_dir)) {
            dol_mkdir($this->output_dir);
        }
    }

    public function generateReport($redact_sensitive = false, $user_issue = '')
    {
        global $conf, $langs, $user;

        $this->redact_sensitive = $redact_sensitive;

        // Define the signature HTML
        $signature_html = '<div class="signature">Generated by DoliDiag - <a href="mailto:contact@dzprod.net">contact@dzprod.net</a>
        </div>';

        // Log configuration state for debugging
        dol_syslog("DoliDiag::generateReport Config: SYSTEM_INFO=" . ($conf->global->DOLIDIAG_SYSTEM_INFO ?? 0) .
                   ", DOLIBARR_INFO=" . ($conf->global->DOLIDIAG_DOLIBARR_INFO ?? 0) .
                   ", MODULE_INFO=" . ($conf->global->DOLIDIAG_MODULE_INFO ?? 0) .
                   ", DATABASE_INFO=" . ($conf->global->DOLIDIAG_DATABASE_INFO ?? 0) .
                   ", SECURITY_STATUS=" . ($conf->global->DOLIDIAG_SECURITY_STATUS ?? 0), LOG_DEBUG);

        $include_system = !empty($conf->global->DOLIDIAG_SYSTEM_INFO);
        $include_dolibarr = !empty($conf->global->DOLIDIAG_DOLIBARR_INFO);
        $include_modules = !empty($conf->global->DOLIDIAG_MODULE_INFO);
        $include_database = !empty($conf->global->DOLIDIAG_DATABASE_INFO);
        $include_security = !empty($conf->global->DOLIDIAG_SECURITY_STATUS);

        $data = array(
            'timestamp' => dol_now(),
            'instance_name' => !empty($conf->global->MAIN_APPLICATION_TITLE) ? $conf->global->MAIN_APPLICATION_TITLE : 'Dolibarr'
        );

        if ($include_system) {
            $data['system'] = $this->getSystemInfo();
        }
        if ($include_dolibarr) {
            $data['dolibarr'] = $this->getDolibarrInfo();
        }
        if ($include_modules) {
            $data['modules'] = $this->getModuleInfo();
        }
        if ($include_database) {
            $data['database'] = $this->getDatabaseInfo();
        }
        if ($include_security) {
            $data['security'] = $this->getSecurityStatus();
        }
        if ($user_issue) {
            $data['user_issue'] = $user_issue;
        }
        $data['recommendations'] = $this->getSupportRecommendations($data);

        // Log data contents for debugging
        dol_syslog("DoliDiag::generateReport Data: database=" . (isset($data['database']) ? json_encode($data['database']) : 'not set') .
                   ", security=" . (isset($data['security']) ? json_encode($data['security']) : 'not set'), LOG_DEBUG);

        $template = file_get_contents(dol_buildpath('/dolidiag/report_template.html'));
        if ($template === false) {
            $this->error = $langs->trans("ErrorLoadingTemplate");
            dol_syslog("DoliDiag::generateReport Failed to load template", LOG_ERR);
            return -1;
        }
        $report_content = $template;

        // Replace placeholders
        $report_content = str_replace('{TIMESTAMP}', dol_print_date($data['timestamp'], 'dayhour'), $report_content);
        $report_content = str_replace('{INSTANCE_NAME}', dol_escape_htmltag($data['instance_name']), $report_content);

        // System Info
        $system_html = $include_system && isset($data['system']) && !empty($data['system'])
            ? '<table class="noborder"><tr class="liste_titre"><th>Parameter</th><th>Value</th></tr>'
            : '<p>' . $langs->trans("SystemInfoNotIncluded") . '</p>';
        if ($include_system && isset($data['system'])) {
            foreach ($data['system'] as $key => $value) {
                $system_html .= '<tr><td>' . dol_escape_htmltag($key) . '</td><td>' . dol_escape_htmltag($value) . '</td></tr>';
            }
            $system_html .= '</table>';
        }
        $report_content = str_replace('{SYSTEM_INFO}', $system_html, $report_content);

        // Dolibarr Info
        $dolibarr_html = $include_dolibarr && isset($data['dolibarr']) && !empty($data['dolibarr'])
            ? '<table class="noborder"><tr class="liste_titre"><th>Parameter</th><th>Value</th></tr>'
            : '<p>' . $langs->trans("DolibarrInfoNotIncluded") . '</p>';
        if ($include_dolibarr && isset($data['dolibarr'])) {
            foreach ($data['dolibarr'] as $key => $value) {
                $dolibarr_html .= '<tr><td>' . dol_escape_htmltag($key) . '</td><td>' . dol_escape_htmltag($value) . '</td></tr>';
            }
            $dolibarr_html .= '</table>';
        }
        $report_content = str_replace('{DOLIBARR_INFO}', $dolibarr_html, $report_content);

        // Module Info
        $modules_html = $include_modules && isset($data['modules']) && !empty($data['modules'])
            ? '<table class="noborder"><tr class="liste_titre"><th>Name</th><th>Version</th><th>Status</th><th>Issues</th></tr>'
            : '<p>' . $langs->trans("ModuleInfoNotIncluded") . '</p>';
        if ($include_modules && isset($data['modules'])) {
            foreach ($data['modules'] as $module) {
                $modules_html .= '<tr>';
                $modules_html .= '<td>' . dol_escape_htmltag($module['name']) . '</td>';
                $modules_html .= '<td>' . dol_escape_htmltag($module['version']) . '</td>';
                $modules_html .= '<td>' . ($module['enabled'] ? 'Enabled' : 'Disabled') . '</td>';
                $modules_html .= '<td>' . dol_escape_htmltag($module['issues']) . '</td>';
                $modules_html .= '</tr>';
            }
            $modules_html .= '</table>';
        }
        $report_content = str_replace('{MODULE_INFO}', $modules_html, $report_content);

        // Database Info
        $database_html = $include_database
            ? '<table class="noborder"><tr class="liste_titre"><th>Parameter</th><th>Value</th></tr>'
            : '<p>' . $langs->trans("DatabaseInfoNotIncluded") . '</p>';
        if ($include_database && isset($data['database']) && !empty($data['database'])) {
            foreach ($data['database'] as $key => $value) {
                $database_html .= '<tr><td>' . dol_escape_htmltag($key) . '</td><td>' . dol_escape_htmltag($value) . '</td></tr>';
            }
            $database_html .= '</table>';
        }
        $report_content = str_replace('{DATABASE_INFO}', $database_html, $report_content);

        // Security Status
        $security_html = $include_security
            ? '<table class="noborder"><tr class="liste_titre"><th>Parameter</th><th>Status</th></tr>'
            : '<p>' . $langs->trans("SecurityStatusNotIncluded") . '</p>';
        if ($include_security && isset($data['security']) && !empty($data['security'])) {
            foreach ($data['security'] as $key => $value) {
                $security_html .= '<tr><td>' . dol_escape_htmltag($key) . '</td><td>' . dol_escape_htmltag($value) . '</td></tr>';
            }
            $security_html .= '</table>';
        }
        $report_content = str_replace('{SECURITY_STATUS}', $security_html, $report_content);

        // User-Reported Issue
        $user_issue_html = $user_issue
            ? '<table class="noborder"><tr class="liste_titre"><th>Description</th></tr><tr><td>' . dol_escape_htmltag($user_issue) . '</td></tr></table>'
            : '<p>' . $langs->trans("NoUserIssueProvided") . '</p>';
        $report_content = str_replace('{USER_ISSUE}', $user_issue_html, $report_content);

        // Support Recommendations
        $recommendations_html = !empty($data['recommendations'])
            ? '<ul>' . array_reduce($data['recommendations'], fn($carry, $rec) => $carry . '<li>' . dol_escape_htmltag($rec) . '</li>', '') . '</ul>'
            : '<p>' . $langs->trans("NoRecommendations") . '</p>';
        $report_content = str_replace('{RECOMMENDATIONS}', $recommendations_html, $report_content);

        $format = !empty($conf->global->DOLIDIAG_REPORT_FORMAT) ? $conf->global->DOLIDIAG_REPORT_FORMAT : 'pdf';
        $extension = '.html';
        // Signature if format is HTML
        if ($format !== 'pdf' && $format !== 'md') {
            $report_content = str_replace('{SIGNATURE}', $signature_html, $report_content);
        } else {
            $report_content = str_replace('{SIGNATURE}', '', $report_content);
        }

        switch ($format) {
            case 'pdf':
                $extension = '.pdf';
                break;
            case 'md':
                $extension = '.md';
                break;
        }
        $filename = 'dolidiag_report_' . dol_print_date(dol_now(), 'dayhourlog') . $extension;
        $filepath = $this->output_dir . $filename;

        if ($format === 'pdf') {
            require_once DOL_DOCUMENT_ROOT . '/core/lib/pdf.lib.php';
            $pdf = pdf_getInstance('A4');
            if (empty($pdf)) {
                $this->error = $langs->trans("ErrorPDFGeneration");
                dol_syslog("DoliDiag::generateReport Failed to initialize PDF", LOG_ERR);
                return -1;
            }

            $pdf->SetCreator('DoliDiag');
            $pdf->SetAuthor($user->login);
            $pdf->SetTitle($langs->trans("DoliDiagReport"));
            $pdf->SetMargins(10, 10, 10);
            $pdf->SetAutoPageBreak(true, 10);
            $pdf->AddPage();

            if (method_exists($pdf, 'writeHTML')) {
                $pdf->writeHTML($report_content, true, false, true, false, '');
            } else {
                $pdf->MultiCell(0, 5, strip_tags($report_content), 0, 'L');
            }

            // Signature
            $pdf->SetFont('', 'I', 8);
            $pdf->Ln(10);
            $pdf->Cell(0, 5, 'Generated by DoliDiag - contact@dzprod.net', 0, 1, 'C');

            $result = $pdf->Output($filepath, 'F');
            if ($result === false) {
                $this->error = $langs->trans("ErrorWritingPDF");
                dol_syslog("DoliDiag::generateReport Failed to write PDF", LOG_ERR);
                return -1;
            }
        } elseif ($format === 'md') {
            $markdown_content = "# DoliDiag Diagnostic Report\n\n";
            $markdown_content .= "Instance: " . $data['instance_name'] . "\n";
            $markdown_content .= "Generated: " . dol_print_date($data['timestamp'], 'dayhour') . "\n\n";

            if ($include_system && isset($data['system']) && !empty($data['system'])) {
                $markdown_content .= "## System Information\n\n";
                $markdown_content .= "| Parameter | Value |\n";
                $markdown_content .= "|-----------|--------|\n";
                foreach ($data['system'] as $key => $value) {
                    $markdown_content .= "| " . str_replace('|', '\\|', $key) . " | " . str_replace('|', '\\|', $value) . " |\n";
                }
                $markdown_content .= "\n";
            }

            if ($include_dolibarr && isset($data['dolibarr']) && !empty($data['dolibarr'])) {
                $markdown_content .= "## Dolibarr Information\n\n";
                $markdown_content .= "| Parameter | Value |\n";
                $markdown_content .= "|-----------|--------|\n";
                foreach ($data['dolibarr'] as $key => $value) {
                    $markdown_content .= "| " . str_replace('|', '\\|', $key) . " | " . str_replace('|', '\\|', $value) . " |\n";
                }
                $markdown_content .= "\n";
            }

            if ($include_modules && isset($data['modules']) && !empty($data['modules'])) {
                $markdown_content .= "## Module Inventory\n\n";
                $markdown_content .= "| Name | Version | Status | Issues |\n";
                $markdown_content .= "|------|---------|--------|--------|\n";
                foreach ($data['modules'] as $module) {
                    $markdown_content .= "| " . str_replace('|', '\\|', $module['name']);
                    $markdown_content .= " | " . str_replace('|', '\\|', $module['version']);
                    $markdown_content .= " | " . ($module['enabled'] ? 'Enabled' : 'Disabled');
                    $markdown_content .= " | " . str_replace('|', '\\|', $module['issues']) . " |\n";
                }
                $markdown_content .= "\n";
            }

            if ($include_database) {
                $markdown_content .= "## Database Information\n\n";
                $markdown_content .= "| Parameter | Value |\n";
                $markdown_content .= "|-----------|--------|\n";
                if (isset($data['database']) && !empty($data['database'])) {
                    foreach ($data['database'] as $key => $value) {
                        $markdown_content .= "| " . str_replace('|', '\\|', $key) . " | " . str_replace('|', '\\|', $value) . " |\n";
                    }
                } else {
                    $markdown_content .= "| No Data | Not Available |\n";
                }
                $markdown_content .= "\n";
            }

            if ($include_security) {
                $markdown_content .= "## Security Status\n\n";
                $markdown_content .= "| Parameter | Status |\n";
                $markdown_content .= "|-----------|--------|\n";
                if (isset($data['security']) && !empty($data['security'])) {
                    foreach ($data['security'] as $key => $value) {
                        $markdown_content .= "| " . str_replace('|', '\\|', $key) . " | " . str_replace('|', '\\|', $value) . " |\n";
                    }
                } else {
                    $markdown_content .= "| No Data | Not Available |\n";
                }
                $markdown_content .= "\n";
            }

            if ($user_issue) {
                $markdown_content .= "## User-Reported Issue\n\n";
                $markdown_content .= "| Description |\n";
                $markdown_content .= "|-------------|\n";
                $markdown_content .= "| " . str_replace('|', '\\|', $user_issue) . " |\n";
                $markdown_content .= "\n";
            }

            if (!empty($data['recommendations'])) {
                $markdown_content .= "## Support Recommendations\n\n";
                foreach ($data['recommendations'] as $rec) {
                    $markdown_content .= "- " . str_replace('|', '\\|', $rec) . "\n";
                }
            }

            // Signature
            $markdown_content .= "\n\n---\n\n";
$markdown_content .= "*Generated by DoliDiag - [contact@dzprod.net](mailto:contact@dzprod.net)*\n";

            $result = file_put_contents($filepath, $markdown_content);
            if ($result === false) {
                $this->error = $langs->trans("ErrorWritingFile");
                dol_syslog("DoliDiag::generateReport Failed to write Markdown", LOG_ERR);
                return -1;
            }
        } else {
            $result = file_put_contents($filepath, $report_content);
            if ($result === false) {
                $this->error = $langs->trans("ErrorWritingFile");
                dol_syslog("DoliDiag::generateReport Failed to write HTML", LOG_ERR);
                return -1;
            }
        }

        $sql = "INSERT INTO " . MAIN_DB_PREFIX . "dolidiag_reports (";
        $sql .= "filename, date_creation, user_id";
        $sql .= ") VALUES (";
        $sql .= "'" . $this->db->escape($filename) . "', ";
        $sql .= "'" . $this->db->idate(dol_now()) . "', ";
        $sql .= $user->id;
        $sql .= ")";

        $resql = $this->db->query($sql);
        if (!$resql) {
            $this->error = $this->db->lasterror();
            dol_syslog("DoliDiag::generateReport Failed to log report", LOG_ERR);
            return -1;
        }

        return $this->db->last_insert_id(MAIN_DB_PREFIX . "dolidiag_reports");
    }

    public function getReports()
    {
        $sql = "SELECT rowid, filename, date_creation";
        $sql .= " FROM " . MAIN_DB_PREFIX . "dolidiag_reports";
        $sql .= " ORDER BY date_creation DESC";

        $resql = $this->db->query($sql);
        if (!$resql) {
            $this->error = $this->db->lasterror();
            dol_syslog("DoliDiag::getReports Failed to fetch reports", LOG_ERR);
            return -1;
        }

        $reports = array();
        while ($obj = $this->db->fetch_object($resql)) {
            $reports[] = array(
                'rowid' => $obj->rowid,
                'filename' => $obj->filename,
                'date_creation' => $this->db->jdate($obj->date_creation)
            );
        }

        return $reports;
    }

    public function downloadReport($report_id)
    {
        global $langs;

        $sql = "SELECT filename FROM " . MAIN_DB_PREFIX . "dolidiag_reports";
        $sql .= " WHERE rowid = " . ((int)$report_id);

        $resql = $this->db->query($sql);
        if ($resql && $obj = $this->db->fetch_object($resql)) {
            $filepath = $this->output_dir . $obj->filename;
            if (file_exists($filepath)) {
                $extension = pathinfo($obj->filename, PATHINFO_EXTENSION);
                switch ($extension) {
                    case 'pdf':
                        $mime_type = 'application/pdf';
                        break;
                    case 'md':
                        $mime_type = 'text/markdown';
                        break;
                    default:
                        $mime_type = 'text/html';
                }
                header('Content-Type: ' . $mime_type);
                header('Content-Disposition: attachment; filename="' . $obj->filename . '"');
                header('Content-Length: ' . filesize($filepath));
                readfile($filepath);
                exit;
            }
        }

        setEventMessages($langs->trans("FileNotFound"), null, 'errors');
        return -1;
    }

    public function deleteReport($id)
    {
        global $conf;

        $this->db->begin();

        $sql = "SELECT filename FROM " . MAIN_DB_PREFIX . "dolidiag_reports WHERE rowid = " . (int)$id;
        $resql = $this->db->query($sql);
        if ($resql && ($obj = $this->db->fetch_object($resql))) {
            $file = $this->output_dir . $obj->filename;
            if (file_exists($file)) {
                if (!dol_delete_file($file, 0, 0, 0, null)) {
                    $this->error = 'Could not delete file: ' . $file;
                    $this->db->rollback();
                    return -1;
                }
            }

            $sql = "DELETE FROM " . MAIN_DB_PREFIX . "dolidiag_reports WHERE rowid = " . (int)$id;
            $resql = $this->db->query($sql);
            if (!$resql) {
                $this->error = $this->db->lasterror();
                $this->db->rollback();
                return -1;
            }

            $this->db->commit();
            return 1;
        }

        $this->error = 'Report not found';
        $this->db->rollback();
        return -1;
    }

    protected function getSystemInfo()
    {
        $info = array(
            'PHP Version' => $this->redact_sensitive ? 'PHP ' . PHP_MAJOR_VERSION . '.' . PHP_MINOR_VERSION . '.x' : phpversion(),
            'Memory Limit' => ini_get('memory_limit'),
            'Max Execution Time' => ini_get('max_execution_time'),
            'Server Software' => $this->redact_sensitive ? 'Web Server' : ($_SERVER['SERVER_SOFTWARE'] ?? 'Unknown'),
            'Operating System' => $this->redact_sensitive ? 'Linux' : php_uname('s') . ' ' . php_uname('r'),
            'cURL Enabled' => function_exists('curl_version') ? 'Yes' : 'No',
            'cURL Version' => $this->redact_sensitive ? 'cURL 7.x' : (function_exists('curl_version') ? curl_version()['version'] : 'N/A'),
            'SSL Support' => function_exists('curl_version') ? (curl_version()['features'] & CURL_VERSION_SSL ? 'Yes' : 'No') : 'N/A'
        );

        $extensions = get_loaded_extensions();
        $info['Loaded Extensions'] = implode(', ', $extensions);

        return $info;
    }

    protected function getDolibarrInfo()
    {
        global $conf, $db;

        $info = array(
            'Dolibarr Version' => $this->redact_sensitive ? 'Dolibarr ' . explode('.', DOL_VERSION)[0] . '.x' : DOL_VERSION,
            'Installation Type' => defined('DOLIWAMP') ? 'DoliWamp' : (defined('DOLIDEB') ? 'DoliDeb' : 'Standard'),
        );

        $sql = "SELECT DISTINCT name FROM " . MAIN_DB_PREFIX . "const";
        $sql .= " WHERE name LIKE 'MAIN_MODULE_%' AND value = '1'";
        $resql = $db->query($sql);
        $modules = array();
        if ($resql) {
            while ($obj = $db->fetch_object($resql)) {
                $modules[] = str_replace('MAIN_MODULE_', '', $obj->name);
            }
        }
        $info['Core Modules'] = implode(', ', $modules);

        $sql = "SELECT COUNT(*) as total, SUM(CASE WHEN statut = 1 THEN 1 ELSE 0 END) as active";
        $sql .= " FROM " . MAIN_DB_PREFIX . "user";
        $resql = $db->query($sql);
        if ($resql && $obj = $db->fetch_object($resql)) {
            $info['Total Users'] = $obj->total;
            $info['Active Users'] = $obj->active;
        }

        $info['Authentication Mode'] = $conf->global->MAIN_AUTHENTICATION_MODE ?? 'dolibarr';
        $info['Document Root'] = $this->redact_sensitive ? '[REDACTED]' : ($conf->global->MAIN_DOCUMENT_ROOT ?? DOL_DOCUMENT_ROOT);

        return $info;
    }

    protected function getModuleInfo()
    {
        global $conf;

        $modules = array();
        $dir = DOL_DOCUMENT_ROOT . '/core/modules/';
        $handle = opendir($dir);

        if (is_resource($handle)) {
            while (($file = readdir($handle)) !== false) {
                if (preg_match('/^mod(.*)\.class\.php$/', $file, $matches)) {
                    $modulename = strtolower($matches[1]);
                    $class = 'mod' . $matches[1];
                    if (file_exists($dir . $file)) {
                        include_once $dir . $file;
                        if (class_exists($class)) {
                            $obj = new $class($this->db);
                            $issues = $this->checkModuleDependencies($obj);
                            $modules[] = array(
                                'name' => $obj->name,
                                'version' => $this->redact_sensitive ? 'N/A' : $obj->version,
                                'enabled' => !empty($conf->global->{'MAIN_MODULE_' . strtoupper($modulename)}),
                                'issues' => implode(', ', $issues)
                            );
                        }
                    }
                }
            }
            closedir($handle);
        }

        $dir = DOL_DOCUMENT_ROOT . '/custom/';
        if (is_dir($dir)) {
            $handle = opendir($dir);
            if (is_resource($handle)) {
                while (($file = readdir($handle)) !== false) {
                    if (is_dir($dir . $file) && $file != '.' && $file != '..') {
                        $modfile = $dir . $file . '/core/modules/mod' . ucfirst($file) . '.class.php';
                        if (file_exists($modfile)) {
                            include_once $modfile;
                            $class = 'mod' . ucfirst($file);
                            if (class_exists($class)) {
                                $obj = new $class($this->db);
                                $issues = $this->checkModuleDependencies($obj);
                                $modules[] = array(
                                    'name' => $obj->name,
                                    'version' => $this->redact_sensitive ? 'N/A' : $obj->version,
                                    'enabled' => !empty($conf->global->{'MAIN_MODULE_' . strtoupper($file)}),
                                    'issues' => implode(', ', $issues)
                                );
                            }
                        }
                    }
                }
                closedir($handle);
            }
        }

        return $modules;
    }

    protected function getDatabaseInfo()
    {
        $info = array(
            'Database Type' => $this->db->type,
            'Version' => $this->db->getVersion(),
            'Connection Status' => $this->db->connected ? 'Connected' : 'Disconnected',
            'Corrupted Tables' => $this->checkCorruptedTables()
        );
        return $info;
    }

    protected function getSecurityStatus()
    {
        global $conf;
        $deprecated_modules = array();
        foreach ($this->getModuleInfo() as $module) {
            if (strpos($module['version'], 'deprecated') !== false) {
                $deprecated_modules[] = $module['name'];
            }
        }
        return array(
            'Dolibarr Version' => $this->redact_sensitive ? 'Dolibarr ' . explode('.', DOL_VERSION)[0] . '.x' : DOL_VERSION . ' (Check for updates)',
            'HTTPS Enforced' => !empty($_SERVER['HTTPS']) ? 'Yes' : 'No',
            'Deprecated Modules' => implode(', ', $deprecated_modules) ?: 'None'
        );
    }

    protected function getSupportRecommendations($data)
    {
        $recommendations = array();
        if (isset($data['modules'])) {
            foreach ($data['modules'] as $module) {
                if ($module['issues']) {
                    $issues = explode(', ', $module['issues']);
                    foreach ($issues as $issue) {
                        if (strpos($issue, 'Missing module:') === 0) {
                            $recommendations[] = "Enable module " . substr($issue, 15) . " for " . $module['name'];
                        } elseif (strpos($issue, 'Missing PHP extension:') === 0) {
                            $recommendations[] = "Install PHP extension " . substr($issue, 22) . " for " . $module['name'];
                        }
                    }
                }
                if (strpos($module['version'], 'deprecated') !== false) {
                    $recommendations[] = "Replace deprecated module " . $module['name'] . " with a supported alternative";
                }
            }
        }
        if (isset($data['security']) && $data['security']['HTTPS Enforced'] === 'No') {
            $recommendations[] = "Enable HTTPS for secure communication";
        }
        return $recommendations;
    }

    protected function checkModuleDependencies($module)
    {
        global $conf;
        $issues = array();

        // Only check dependencies for enabled modules
        $module_name = strtolower(preg_replace('/^mod/', '', get_class($module)));
        $is_enabled = !empty($conf->global->{'MAIN_MODULE_' . strtoupper($module_name)});
        
        if (!$is_enabled) {
            // Module is disabled, no need to check dependencies
            return $issues;
        }

        // Check PHP version requirement
        if (!empty($module->phpmin)) {
            $phpmin = implode('.', $module->phpmin);
            if (version_compare(PHP_VERSION, $phpmin, '<')) {
                $issues[] = 'Requires PHP >= ' . $phpmin;
            }
        }

        // Check Dolibarr version requirement
        if (!empty($module->need_dolibarr_version)) {
            $dolmin = implode('.', $module->need_dolibarr_version);
            if (version_compare(DOL_VERSION, $dolmin, '<')) {
                $issues[] = 'Requires Dolibarr >= ' . $dolmin;
            }
        }

        // Check required Dolibarr modules
        if (!empty($module->depends) && is_array($module->depends)) {
            foreach ($module->depends as $dep) {
                if (is_string($dep)) {
                    // Convert modXXX to XXX format (proper Dolibarr module name)
                    $dep_proper = preg_replace('/^mod/', '', $dep);
                    $dep_upper = strtoupper($dep_proper);
                    
                    // Check if module is enabled
                    if (empty($conf->global->{'MAIN_MODULE_' . $dep_upper})) {
                        $issues[] = 'Missing module: ' . $dep_proper;
                    }
                }
            }
        }

        // Check common PHP extensions (optional, can be expanded)
        $required_extensions = array('curl', 'gd', 'mbstring', 'xml');
        foreach ($required_extensions as $ext) {
            if (!extension_loaded($ext) && $this->moduleMayRequireExtension($module->name, $ext)) {
                $issues[] = 'Missing PHP extension: ' . $ext;
            }
        }

        return $issues;
    }

    protected function moduleMayRequireExtension($module_name, $extension)
    {
        // Basic mapping of modules to potential PHP extension requirements
        // This can be expanded based on known module requirements
        $module_extension_map = array(
            'Email' => array('imap'), // Example: Email module might need imap
            'PDF' => array('gd'),     // Example: PDF generation might need gd
        );

        $module_name = strtolower($module_name);
        foreach ($module_extension_map as $mod => $exts) {
            if (strtolower($mod) === $module_name && in_array($extension, $exts)) {
                return true;
            }
        }
        return false;
    }

    protected function checkCorruptedTables()
    {
        // Placeholder: Implement actual table checks
        return 'None';
    }
}
?>